{"entries":[{"timestamp":1748717006913,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2980,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"I*X%7])T^PYc!kr/U^Ue\">Button</variable><variable id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</variable><variable id=\"$8tjzA:6S(angrC3MZ|z\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"740\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"0\" y=\"381\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":412,"length1":31,"diffs":[[1,"        info.changeScoreBy(5)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":264,"length1":0,"diffs":[[1,"        \"custom.ts\",\n"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":58,"length1":72,"diffs":[[1,"    let toggleBases: Sprite[] = [];\n    let togglesTexts: Sprite[] = []; // Array to store text sprites for slider values\n    let toggleKnobs: Sprite[] = [];\n"]]},{"start1":338,"length1":106,"diffs":[[1,"    //% block=\"create toggle of color $color and toggle color $linecolor\"\n    //% blockSetVariable=Button\n"]]},{"start1":629,"length1":46,"diffs":[[1,"        let sliderIndex = toggleBases.length;\n"]]},{"start1":976,"length1":38,"diffs":[[1,"        toggleBases.push(buttonBase);\n"]]},{"start1":1369,"length1":37,"diffs":[[1,"        toggleKnobs.push(toggleKnob)\n"]]},{"start1":1492,"length1":0,"diffs":[[1,"\n        // Create a renderable text that will follow the slider\n        let toggleText = sprites.create(image.create(1, 1), SpriteKind.Player); // Create empty sprite for text\n        togglesTexts.push(toggleText); // Store the text sprite\n        scene.createRenderable(100, function (ctx) {\n            let text = \"\";\n            // Create text above the slider\n            toggleText.setImage(image.create(text.length * 8, 8));\n            toggleText.image.fill(0);  // Clear the image to create new text\n            toggleText.image.print(text, 0, 0);\n            toggleText.setPosition(buttonBase.x - 13, buttonBase.y);  // Position the text above the slider\n        });\n"]]},{"start1":2411,"length1":49,"diffs":[[1,"        let index = toggleBases.indexOf(toggle);\n"]]},{"start1":2487,"length1":97,"diffs":[[1,"            let toggleBase = toggleBases[index];\n            let toggleKnob = toggleKnobs[index]\n"]]},{"start1":2947,"length1":61,"diffs":[[1,"            let index = toggleBases.indexOf(selectedButton);\n"]]},{"start1":3039,"length1":106,"diffs":[[1,"                let toggleKnob = toggleKnobs[index];\n                let toggleBase = toggleBases[index];\n"]]},{"start1":3910,"length1":49,"diffs":[[1,"        let index = toggleBases.indexOf(button);\n"]]},{"start1":3986,"length1":49,"diffs":[[1,"            let toggleKnob = toggleKnobs[index];\n"]]},{"start1":4568,"length1":64,"diffs":[[1,"        if (toggleBases.length = 0) return; // No sliders exist\n"]]},{"start1":4725,"length1":45,"diffs":[[1,"            selectedButton = toggleBases[0];\n"]]},{"start1":4854,"length1":61,"diffs":[[1,"            let index = toggleBases.indexOf(selectedButton);\n"]]},{"start1":4970,"length1":51,"diffs":[[1,"                if (index >= toggleBases.length) {\n"]]},{"start1":5122,"length1":53,"diffs":[[1,"                selectedButton = toggleBases[index];\n"]]},{"start1":5400,"length1":120,"diffs":[[1,"    //%block=\"Destroy $toggle\"\n    //%toggle.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function destroy(toggle: Sprite): void {\n\n"]]}]},{"type":"removed","filename":"custom.ts","value":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1748717593736,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2929,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"I*X%7])T^PYc!kr/U^Ue\">Button</variable><variable id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</variable><variable id=\"$8tjzA:6S(angrC3MZ|z\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"740\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">-1</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"0\" y=\"381\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":23,"diffs":[[1,"    \"name\": \"button #2\",\n"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":4720,"length1":77,"diffs":[[1,""]]},{"start1":4744,"length1":95,"diffs":[[1,"buttonKnobs.\n"]]}]}]},{"timestamp":1748718186818,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2984,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"x{SLWV[Kj-dvkm5--M6.\">Button</variable><variable id=\"5b-Ll?e]hB9jGa/Bljk/\">Button2</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"x{SLWV[Kj-dvkm5--M6.\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x{SLWV[Kj-dvkm5--M6.\">Button</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"5b-Ll?e]hB9jGa/Bljk/\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"721\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x{SLWV[Kj-dvkm5--M6.\">Button</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"5b-Ll?e]hB9jGa/Bljk/\">Button2</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">-1</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"0\" y=\"397\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"x{SLWV[Kj-dvkm5--M6.\">Button</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":284,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":4668,"length1":35,"diffs":[[1,""]]},{"start1":4797,"length1":278,"diffs":[[1,"sprites.destroy(button)\nbuttonKnobs[index].destroy()\nbuttonKnobs.splice(index,1)\nbuttonBases.splice(index,1)\n"]]}]}]},{"timestamp":1748718623358,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2984,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</variable><variable id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</variable><variable id=\"3P$[Me];oj#_q;z}4#50\">item</variable></variables><block type=\"pxt-on-start\" x=\"32\" y=\"50\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"741\" y=\"20\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">-1</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"20\" y=\"417\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></statement></block></xml>"]]}]}]},{"timestamp":1748732627780,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":284,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1748732918770,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</variable><variable id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</variable><variable id=\"3P$[Me];oj#_q;z}4#50\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"709\" y=\"-30\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">-1</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"-12\" y=\"367\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\n    button.destroy(Button)\n})\nlet Button: Sprite = null\nButton = button.createSlider3(2, 8)\nbutton.setSliderPosition3(Button, 80, 10)\nlet Button2 = button.createSlider3(4, 9)\nbutton.cycleToNextSlider()\nforever(function () {\n    if (button.getToggleValue(Button)) {\n        info.changeScoreBy(1)\n    }\n    if (button.getToggleValue(Button2)) {\n        info.changeScoreBy(-1)\n    }\n})\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":70,"length1":22,"diffs":[[1,"        \"device\": \"*\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n"]]},{"start1":284,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":0,"length1":18,"diffs":[[1,""]]},{"start1":3706,"length1":37,"diffs":[[1,"    //%block=\"Cycle through toggles\"\n"]]}]}]},{"timestamp":1748733485707,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":182,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"></block></xml>"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":18,"length1":29,"diffs":[[1,""]]}]}]},{"timestamp":1748796160544,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":222,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1748796162823,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":208,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"3P$[Me];oj#_q;z}4#50\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":222,"length1":79,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"u.ts","patch":[{"start1":35,"length1":12,"diffs":[[1,"//%icon=\"\"\n"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1748717006912,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"I*X%7])T^PYc!kr/U^Ue\">Button</variable><variable id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</variable><variable id=\"$8tjzA:6S(angrC3MZ|z\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></shadow></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"740\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><shadow type=\"variables_get\"><field name=\"VAR\" id=\"l0~~w@_5:^0IK=o_sv2w\">Button2</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"0\" y=\"381\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"I*X%7])T^PYc!kr/U^Ue\">Button</field></block></value></block></statement></block></xml>","main.ts":"controller.menu.onEvent(ControllerButtonEvent.Pressed, function () {\n    button.destroy(Button)\n})\nlet Button: Sprite = null\nButton = button.createSlider3(2, 8)\nbutton.setSliderPosition3(Button, 80, 10)\nlet Button2 = button.createSlider3(4, 9)\nbutton.cycleToNextSlider()\nforever(function () {\n    if (button.getToggleValue(Button)) {\n        info.changeScoreBy(1)\n    }\n    if (button.getToggleValue(Button2)) {\n        info.changeScoreBy(5)\n    }\n})\n","README.md":" ","assets.json":"","custom.ts":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://arcade.makecode.com/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","u.ts":"namespace button {\n    let selectedButton: Sprite = null;\n    let toggleBases: Sprite[] = [];\n    let togglesTexts: Sprite[] = []; // Array to store text sprites for slider values\n    let toggleKnobs: Sprite[] = [];\n    let buttonColor: number[] = [];\n    let c = false\n    let buttonClick: boolean[] = []; // Store state for each toggle\n    //% block=\"create toggle of color $color and toggle color $linecolor\"\n    //% blockSetVariable=Button\n    //% group=\"Create\"\n    //% color.shadow=\"colorindexpicker\"\n    //% linecolor.shadow=\"colorindexpicker\"\n    export function createSlider3(color: number, linecolor: number): Sprite {\n        let sliderIndex = toggleBases.length;\n        // Create the bar for the slider (default: horizontal)\n        let baseImage = image.create(15, 15);\n        baseImage.fill(0)\n        baseImage.drawCircle(7.5,7.5,5,color)\n        baseImage.fillCircle(7.5, 7.5, 5, color)\n        let buttonBase = sprites.create(baseImage, SpriteKind.Player);\n        toggleBases.push(buttonBase);\n        buttonColor.push(linecolor)\n\n        // Position the knob at the leftmost position of the bar\n        buttonBase.setPosition(80, 60); // Default position\n\n        // make the square\n        let knobImage = image.create(15, 15)\n        knobImage.drawCircle(7.5,7.5,6,linecolor)\n        let toggleKnob = sprites.create(knobImage, SpriteKind.Player)\n        toggleKnobs.push(toggleKnob)\n\n        toggleKnob.setPosition(buttonBase.x, buttonBase.y)\n\n        // make the text\n\n        // Create a renderable text that will follow the slider\n        let toggleText = sprites.create(image.create(1, 1), SpriteKind.Player); // Create empty sprite for text\n        togglesTexts.push(toggleText); // Store the text sprite\n        scene.createRenderable(100, function (ctx) {\n            let text = \"\";\n            // Create text above the slider\n            toggleText.setImage(image.create(text.length * 8, 8));\n            toggleText.image.fill(0);  // Clear the image to create new text\n            toggleText.image.print(text, 0, 0);\n            toggleText.setPosition(buttonBase.x - 13, buttonBase.y);  // Position the text above the slider\n        });\n        return toggleKnob, buttonBase;\n    }\n    //% block=\"set $toggle position to X $x Y $y\"\n    //% group=\"Functions\"\n    //% toggle.shadow=variables_get\n    export function setSliderPosition3(toggle: Sprite, x: number, y: number): void {\n        let index = toggleBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = toggleBases[index];\n            let toggleKnob = toggleKnobs[index]\n\n            toggleBase.setPosition(x, y);\n            toggleKnob.setPosition(toggleBase.x, toggleBase.y)\n\n\n        }\n    }\n    //%button.shadow=variables_get\n    //%block\n    export function control(button: Sprite): void {\n        selectedButton = button\n    }\n\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton) {\n            let index = toggleBases.indexOf(selectedButton);\n            if (index != -1) {\n                let toggleKnob = toggleKnobs[index];\n                let toggleBase = toggleBases[index];\n                let buttoncolor = buttonColor[index]\n                if (buttonClick[index] == undefined) {\n                    buttonClick[index] = false; // Default to false\n                }\n\n                if (buttonClick[index] == false) {\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, 0)\n                    pause(100)\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, buttonColor[index])\n                    buttonClick[index] = true;\n                    pause(20)\n                    buttonClick[index] = false\n                }\n            }\n        }\n    });\n\n\n    //%block=\"is $button clicked\"\n    //%button.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function getToggleValue(button: Sprite,): boolean {\n        let index = toggleBases.indexOf(button);\n        if (index != -1) {\n            let toggleKnob = toggleKnobs[index];\n            if (buttonClick[index] == undefined) {\n               \n                return buttonClick[index]\n            } else {\n                return buttonClick[index]\n            }\n\n            if (buttonClick[index] == false) {\n                buttonClick[index] = true;\n                return buttonClick[index]\n               \n            }\n        }\n        \n        return undefined;\n    }\n    //Cycling through the sliders\n    //%block=\"Cycle through toggles\"\n    export function cycleToNextSlider(): void {\n     c = true\n        if (toggleBases.length = 0) return; // No sliders exist\n        // If no slider is selected, start from the first one\n        if (!selectedButton) {\n            selectedButton = toggleBases[0];\n        } else {\n\n            // Get the current index and cycle to the next slider\n            let index = toggleBases.indexOf(selectedButton);\n            if (index != -1) {\n                index++\n                if (index >= toggleBases.length) {\n                    index = 0; // If we reach the end, cycle back to the first one\n                }\n                selectedButton = toggleBases[index];\n            }\n        }\n    }\n    controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton !== null && c == true) {\n            cycleToNextSlider(); // Trigger slider cycl\n        }\n    })\n    //%block=\"Destroy $toggle\"\n    //%toggle.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function destroy(toggle: Sprite): void {\n\n    }\n}","pxt.json":"{\n    \"name\": \"button #2\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"custom.ts\",\n        \"u.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1748732622697,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</variable><variable id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</variable><variable id=\"3P$[Me];oj#_q;z}4#50\">item</variable></variables><block type=\"pxt-on-start\" x=\"32\" y=\"50\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">2</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">8</field></shadow></value></block></value><next><block type=\"button_setSliderPosition3\"><value name=\"toggle\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value><value name=\"x\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><value name=\"y\"><shadow type=\"math_number\"><field name=\"NUM\">10</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"button_createSlider3\"><value name=\"color\"><shadow type=\"colorindexpicker\"><field name=\"index\">4</field></shadow></value><value name=\"linecolor\"><shadow type=\"colorindexpicker\"><field name=\"index\">9</field></shadow></value></block></value><next><block type=\"button_cycleToNextSlider\"></block></next></block></next></block></next></block></statement></block><block type=\"forever\" x=\"741\" y=\"20\"><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></statement><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"button_getToggleValue\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"y5Sg2)r6COi7/!G?1!nI\">Button2</field></block></value></block></value><statement name=\"DO0\"><block type=\"hudChangeScoreBy\"><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">-1</field></shadow></value></block></statement></block></next></block></statement></block><block type=\"keyonevent\" x=\"20\" y=\"417\"><field name=\"button\">controller.menu</field><field name=\"event\">ControllerButtonEvent.Pressed</field><statement name=\"HANDLER\"><block type=\"button_destroy\"><value name=\"button\"><block type=\"variables_get\"><field name=\"VAR\" id=\"_jx9{qO{ax9ZZ.NsiSN:\">Button</field></block></value></block></statement></block></xml>","main.ts":"","README.md":" ","assets.json":"","u.ts":"namespace button {\n    let selectedButton: Sprite = null;\n    let buttonBases: Sprite[] = [];\n    let buttonKnobs: Sprite[] = [];\n    let buttonColor: number[] = [];\n    let c = false\n    let buttonClick: boolean[] = []; // Store state for each toggle\n    //% block=\"create button of color $color and egde color $linecolor\"\n    //% blockSetVariable=myButton\n    //% group=\"Create\"\n    //% color.shadow=\"colorindexpicker\"\n    //% linecolor.shadow=\"colorindexpicker\"\n    export function createSlider3(color: number, linecolor: number): Sprite {\n        let buttonIndex = buttonBases.length;\n        // Create the bar for the slider (default: horizontal)\n        let baseImage = image.create(15, 15);\n        baseImage.fill(0)\n        baseImage.drawCircle(7.5,7.5,5,color)\n        baseImage.fillCircle(7.5, 7.5, 5, color)\n        let buttonBase = sprites.create(baseImage, SpriteKind.Player);\n        buttonBases.push(buttonBase);\n        buttonColor.push(linecolor)\n\n        // Position the knob at the leftmost position of the bar\n        buttonBase.setPosition(80, 60); // Default position\n\n        // make the square\n        let knobImage = image.create(15, 15)\n        knobImage.drawCircle(7.5,7.5,6,linecolor)\n        let toggleKnob = sprites.create(knobImage, SpriteKind.Player)\n        buttonKnobs.push(toggleKnob)\n\n        toggleKnob.setPosition(buttonBase.x, buttonBase.y)\n\n        // make the text\n        return toggleKnob, buttonBase;\n    }\n    //% block=\"set $toggle position to X $x Y $y\"\n    //% group=\"Functions\"\n    //% toggle.shadow=variables_get\n    export function setSliderPosition3(toggle: Sprite, x: number, y: number): void {\n        let index = buttonBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = buttonBases[index];\n            let toggleKnob = buttonKnobs[index]\n\n            toggleBase.setPosition(x, y);\n            toggleKnob.setPosition(toggleBase.x, toggleBase.y)\n\n\n        }\n    }\n    //%button.shadow=variables_get\n    //%block\n    export function control(button: Sprite): void {\n        selectedButton = button\n    }\n\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton) {\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                let toggleKnob = buttonKnobs[index];\n                let toggleBase = buttonBases[index];\n                let buttoncolor = buttonColor[index]\n                if (buttonClick[index] == undefined) {\n                    buttonClick[index] = false; // Default to false\n                }\n\n                if (buttonClick[index] == false) {\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, 0)\n                    pause(100)\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, buttonColor[index])\n                    buttonClick[index] = true;\n                    pause(20)\n                    buttonClick[index] = false\n                }\n            }\n        }\n    });\n\n\n    //%block=\"is $button clicked\"\n    //%button.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function getToggleValue(button: Sprite,): boolean {\n        let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let toggleKnob = buttonKnobs[index];\n            if (buttonClick[index] == undefined) {\n               \n                return buttonClick[index]\n            } else {\n                return buttonClick[index]\n            }\n\n            if (buttonClick[index] == false) {\n                buttonClick[index] = true;\n                return buttonClick[index]\n               \n            }\n        }\n        \n        return undefined;\n    }\n    //Cycling through the sliders\n    //%block=\"Cycle through toggles\"\n    export function cycleToNextSlider(): void {\n     c = true\n        if (buttonBases.length = 0) return; // No sliders exist\n        // If no slider is selected, start from the first one\n        if (!selectedButton) {\n            selectedButton = buttonBases[0];\n        } else {\n\n            // Get the current index and cycle to the next slider\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                index++\n                if (index >= buttonBases.length) {\n                    index = 0; // If we reach the end, cycle back to the first one\n                }\n                selectedButton = buttonBases[index];\n            }\n        }\n    }\n    controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton !== null && c == true) {\n            cycleToNextSlider(); // Trigger slider cycl\n        }\n    })\n    //%block=\"Destroy $button\"\n    //%button.shadow=variables_get\n    export function destroy(button: Sprite): void {\n         let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let buttonBase = buttonBases[index];\n            buttonBase.destroy();\n            button.destroy();\n              let buttonKnob = buttonKnobs[index];\n            buttonKnob.destroy();\n            buttonBases.splice(index,1)\n            buttonKnobs.splice(index,1)\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"buttons\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\",\n        \"arcade-text\": \"github:microsoft/arcade-text#v1.3.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"u.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1748732917987,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","u.ts":"//%block=\"Button\"\nnamespace button {\n    let selectedButton: Sprite = null;\n    let buttonBases: Sprite[] = [];\n    let buttonKnobs: Sprite[] = [];\n    let buttonColor: number[] = [];\n    let c = false\n    let buttonClick: boolean[] = []; // Store state for each toggle\n    //% block=\"create button of color $color and egde color $linecolor\"\n    //% blockSetVariable=myButton\n    //% group=\"Create\"\n    //% color.shadow=\"colorindexpicker\"\n    //% linecolor.shadow=\"colorindexpicker\"\n    export function createSlider3(color: number, linecolor: number): Sprite {\n        let buttonIndex = buttonBases.length;\n        // Create the bar for the slider (default: horizontal)\n        let baseImage = image.create(15, 15);\n        baseImage.fill(0)\n        baseImage.drawCircle(7.5,7.5,5,color)\n        baseImage.fillCircle(7.5, 7.5, 5, color)\n        let buttonBase = sprites.create(baseImage, SpriteKind.Player);\n        buttonBases.push(buttonBase);\n        buttonColor.push(linecolor)\n\n        // Position the knob at the leftmost position of the bar\n        buttonBase.setPosition(80, 60); // Default position\n\n        // make the square\n        let knobImage = image.create(15, 15)\n        knobImage.drawCircle(7.5,7.5,6,linecolor)\n        let toggleKnob = sprites.create(knobImage, SpriteKind.Player)\n        buttonKnobs.push(toggleKnob)\n\n        toggleKnob.setPosition(buttonBase.x, buttonBase.y)\n\n        // make the text\n        return toggleKnob, buttonBase;\n    }\n    //% block=\"set $toggle position to X $x Y $y\"\n    //% group=\"Functions\"\n    //% toggle.shadow=variables_get\n    export function setSliderPosition3(toggle: Sprite, x: number, y: number): void {\n        let index = buttonBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = buttonBases[index];\n            let toggleKnob = buttonKnobs[index]\n\n            toggleBase.setPosition(x, y);\n            toggleKnob.setPosition(toggleBase.x, toggleBase.y)\n\n\n        }\n    }\n    //%button.shadow=variables_get\n    //%block\n    export function control(button: Sprite): void {\n        selectedButton = button\n    }\n\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton) {\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                let toggleKnob = buttonKnobs[index];\n                let toggleBase = buttonBases[index];\n                let buttoncolor = buttonColor[index]\n                if (buttonClick[index] == undefined) {\n                    buttonClick[index] = false; // Default to false\n                }\n\n                if (buttonClick[index] == false) {\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, 0)\n                    pause(100)\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, buttonColor[index])\n                    buttonClick[index] = true;\n                    pause(20)\n                    buttonClick[index] = false\n                }\n            }\n        }\n    });\n\n\n    //%block=\"is $button clicked\"\n    //%button.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function getToggleValue(button: Sprite,): boolean {\n        let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let toggleKnob = buttonKnobs[index];\n            if (buttonClick[index] == undefined) {\n               \n                return buttonClick[index]\n            } else {\n                return buttonClick[index]\n            }\n\n            if (buttonClick[index] == false) {\n                buttonClick[index] = true;\n                return buttonClick[index]\n               \n            }\n        }\n        \n        return undefined;\n    }\n    //Cycling through the sliders\n    //%block=\"Cycle through toggles\"\n    export function cycleToNextSlider(): void {\n     c = true\n        if (buttonBases.length = 0) return; // No sliders exist\n        // If no slider is selected, start from the first one\n        if (!selectedButton) {\n            selectedButton = buttonBases[0];\n        } else {\n\n            // Get the current index and cycle to the next slider\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                index++\n                if (index >= buttonBases.length) {\n                    index = 0; // If we reach the end, cycle back to the first one\n                }\n                selectedButton = buttonBases[index];\n            }\n        }\n    }\n    controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton !== null && c == true) {\n            cycleToNextSlider(); // Trigger slider cycl\n        }\n    })\n    //%block=\"Destroy $button\"\n    //%button.shadow=variables_get\n    export function destroy(button: Sprite): void {\n         let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let buttonBase = buttonBases[index];\n            buttonBase.destroy();\n            button.destroy();\n              let buttonKnob = buttonKnobs[index];\n            buttonKnob.destroy();\n            buttonBases.splice(index,1)\n            buttonKnobs.splice(index,1)\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"buttons\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"u.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1748796005707,"editorVersion":"2.0.56","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"3P$[Me];oj#_q;z}4#50\">item</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>","main.ts":"","README.md":" ","assets.json":"","u.ts":"//%block=\"Button\"\n//%color=#37A8DB\n//%icon=\"\"\nnamespace button {\n    let selectedButton: Sprite = null;\n    let buttonBases: Sprite[] = [];\n    let buttonKnobs: Sprite[] = [];\n    let buttonColor: number[] = [];\n    let c = false\n    let buttonClick: boolean[] = []; // Store state for each toggle\n    //% block=\"create button of color $color and egde color $linecolor\"\n    //% blockSetVariable=myButton\n    //% group=\"Create\"\n    //% color.shadow=\"colorindexpicker\"\n    //% linecolor.shadow=\"colorindexpicker\"\n    export function createSlider3(color: number, linecolor: number): Sprite {\n        let buttonIndex = buttonBases.length;\n        // Create the bar for the slider (default: horizontal)\n        let baseImage = image.create(15, 15);\n        baseImage.fill(0)\n        baseImage.drawCircle(7.5,7.5,5,color)\n        baseImage.fillCircle(7.5, 7.5, 5, color)\n        let buttonBase = sprites.create(baseImage, SpriteKind.Player);\n        buttonBases.push(buttonBase);\n        buttonColor.push(linecolor)\n\n        // Position the knob at the leftmost position of the bar\n        buttonBase.setPosition(80, 60); // Default position\n\n        // make the square\n        let knobImage = image.create(15, 15)\n        knobImage.drawCircle(7.5,7.5,6,linecolor)\n        let toggleKnob = sprites.create(knobImage, SpriteKind.Player)\n        buttonKnobs.push(toggleKnob)\n\n        toggleKnob.setPosition(buttonBase.x, buttonBase.y)\n\n        // make the text\n        return toggleKnob, buttonBase;\n    }\n    //% block=\"set $toggle position to X $x Y $y\"\n    //% group=\"Functions\"\n    //% toggle.shadow=variables_get\n    export function setSliderPosition3(toggle: Sprite, x: number, y: number): void {\n        let index = buttonBases.indexOf(toggle);\n        if (index != -1) {\n            let toggleBase = buttonBases[index];\n            let toggleKnob = buttonKnobs[index]\n\n            toggleBase.setPosition(x, y);\n            toggleKnob.setPosition(toggleBase.x, toggleBase.y)\n\n\n        }\n    }\n    //%button.shadow=variables_get\n    //%block\n    export function control(button: Sprite): void {\n        selectedButton = button\n    }\n\n    controller.A.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton) {\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                let toggleKnob = buttonKnobs[index];\n                let toggleBase = buttonBases[index];\n                let buttoncolor = buttonColor[index]\n                if (buttonClick[index] == undefined) {\n                    buttonClick[index] = false; // Default to false\n                }\n\n                if (buttonClick[index] == false) {\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, 0)\n                    pause(100)\n                    toggleKnob.image.drawCircle(7.5, 7.5, 6, buttonColor[index])\n                    buttonClick[index] = true;\n                    pause(20)\n                    buttonClick[index] = false\n                }\n            }\n        }\n    });\n\n\n    //%block=\"is $button clicked\"\n    //%button.shadow=variables_get\n    //%boolea.shadow=\"toggleOnOff\"\n    export function getToggleValue(button: Sprite,): boolean {\n        let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let toggleKnob = buttonKnobs[index];\n            if (buttonClick[index] == undefined) {\n               \n                return buttonClick[index]\n            } else {\n                return buttonClick[index]\n            }\n\n            if (buttonClick[index] == false) {\n                buttonClick[index] = true;\n                return buttonClick[index]\n               \n            }\n        }\n        \n        return undefined;\n    }\n    //Cycling through the sliders\n    //%block=\"Cycle through Buttons\"\n    export function cycleToNextSlider(): void {\n     c = true\n        if (buttonBases.length = 0) return; // No sliders exist\n        // If no slider is selected, start from the first one\n        if (!selectedButton) {\n            selectedButton = buttonBases[0];\n        } else {\n\n            // Get the current index and cycle to the next slider\n            let index = buttonBases.indexOf(selectedButton);\n            if (index != -1) {\n                index++\n                if (index >= buttonBases.length) {\n                    index = 0; // If we reach the end, cycle back to the first one\n                }\n                selectedButton = buttonBases[index];\n            }\n        }\n    }\n    controller.B.onEvent(ControllerButtonEvent.Pressed, function () {\n        if (selectedButton !== null && c == true) {\n            cycleToNextSlider(); // Trigger slider cycl\n        }\n    })\n    //%block=\"Destroy $button\"\n    //%button.shadow=variables_get\n    export function destroy(button: Sprite): void {\n         let index = buttonBases.indexOf(button);\n        if (index != -1) {\n            let buttonBase = buttonBases[index];\n            buttonBase.destroy();\n            button.destroy();\n              let buttonKnob = buttonKnobs[index];\n            buttonKnob.destroy();\n            buttonBases.splice(index,1)\n            buttonKnobs.splice(index,1)\n        }\n    }\n}","pxt.json":"{\n    \"name\": \"buttons\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"u.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}}],"shares":[],"lastSaveTime":1748796413990}